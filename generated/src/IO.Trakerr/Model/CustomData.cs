/* 
 * Trakerr API
 *
 * Get your application events and errors to Trakerr via the *Trakerr API*.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Trakerr.Model
{
    /// <summary>
    /// (optional) Custom string or double data to submit along with the event. This data can then be used in the Trakerr UI to view segmented data.
    /// </summary>
    [DataContract]
    public partial class CustomData :  IEquatable<CustomData>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomData" /> class.
        /// </summary>
        /// <param name="StringData">StringData.</param>
        /// <param name="DoubleData">DoubleData.</param>
        public CustomData(CustomStringData StringData = null, CustomDoubleData DoubleData = null)
        {
            this.StringData = StringData;
            this.DoubleData = DoubleData;
        }
        
        /// <summary>
        /// Gets or Sets StringData
        /// </summary>
        [DataMember(Name="stringData", EmitDefaultValue=false)]
        public CustomStringData StringData { get; set; }
        /// <summary>
        /// Gets or Sets DoubleData
        /// </summary>
        [DataMember(Name="doubleData", EmitDefaultValue=false)]
        public CustomDoubleData DoubleData { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomData {\n");
            sb.Append("  StringData: ").Append(StringData).Append("\n");
            sb.Append("  DoubleData: ").Append(DoubleData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CustomData);
        }

        /// <summary>
        /// Returns true if CustomData instances are equal
        /// </summary>
        /// <param name="other">Instance of CustomData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomData other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.StringData == other.StringData ||
                    this.StringData != null &&
                    this.StringData.Equals(other.StringData)
                ) && 
                (
                    this.DoubleData == other.DoubleData ||
                    this.DoubleData != null &&
                    this.DoubleData.Equals(other.DoubleData)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.StringData != null)
                    hash = hash * 59 + this.StringData.GetHashCode();
                if (this.DoubleData != null)
                    hash = hash * 59 + this.DoubleData.GetHashCode();
                return hash;
            }
        }
    }

}
